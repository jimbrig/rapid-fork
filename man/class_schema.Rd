% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components-schema.R
\name{class_schema}
\alias{class_schema}
\title{Reusable input and output data type definitions}
\usage{
class_schema(
  type = c("string", "number", "integer", "boolean", "array", "object"),
  ...,
  nullable = FALSE,
  description = character(),
  format = character()
)
}
\arguments{
\item{type}{Factor (or coercible to factor). The type of object being
defined. Currently must be one of "string", "number", "integer", "boolean",
"array", or "object".}

\item{...}{These dots are for future extensions and must be empty.}

\item{nullable}{Logical scalar (default \code{FALSE}). Whether the parameter can
be set to \code{NULL}.}

\item{description}{Character scalar (optional). A description of the object
defined by the schema.}

\item{format}{Character scalar (optional). The format of the object.
Essentially a sub-type.}
}
\value{
A \code{schema} S7 object describing the data type, with fields \code{type},
\code{nullable}, \code{description}, and \code{format}.
}
\description{
The \code{schema} object allows the definition of input and output data types.
These types can be objects, but also primitives and arrays. This object is a
superset of the \href{https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00}{JSON Schema Specification Draft 2020-12}.
}
\examples{
class_schema("string")
class_schema("string", nullable = TRUE, description = "A nullable string.")
}
\seealso{
\code{\link[=as_schema]{as_schema()}} for coercing objects to \code{schema}.
}
